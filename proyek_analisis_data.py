# -*- coding: utf-8 -*-
"""Proyek_Analisis_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cPlwcQdKF23XEMAA-ReRburVygRtHAy8

# Proyek Analisis Data: (BIKE SHARING DATASET)
- **Nama:** Faishal Anwar Hasyim
- **Email:** anwarfaishal86@gmail.com
- **ID Dicoding:** anwarfaishal86

---
Data yang digunakan dapat diakses pada link [bike sharing dataset-kaggle](https://www.kaggle.com/datasets/lakshmi25npathi/bike-sharing-dataset/data)

Data tersebut memiliki beberapa atribut:
*   instant: indeks tiap entri data
*   dteday: tanggal saat data diambil
*   season: musim (1: musim semi, 2: musim panas, 3: musim gugur, 4: musim dingin
*   yr: tahun (0: 2011, 1: 2012)
*   mnth: bulan (1 hingga 12)
*   hr: jam (0 hingga 23)
*   holiday: apakah data diambil ketika holiday atau tidak
*   weekday: hari dalam seminggu saat data diambil
*   workingday: hari kerja
*   weathersit: kondisi cuaca
    *  1: Cerah, Sedikit awan, Sebagian berawan, Sebagian berawan
    *  2: Kabut + Mendung, Kabut + Awan pecah, Kabut + Sebagian awan, Kabut
    *  3: Salju Ringan, Hujan Ringan + Badai petir + Awan berkepul-kepul, Hujan Ringan + Awan berkepul-kepul
    *  4: Hujan Lebat + Es butiran + Badai petir + Kabut, Salju + Kabut
*   temp: Suhu yang dinormalisasi dalam derajat Celsius
*   atemp: Suhu perasaan yang dinormalisasi dalam derajat Celsius
*   hum: Kelembaban yang dinormalisasi
*   windspeed: Kecepatan angin yang dinormalisasi
*   casual: Jumlah pengguna kasual
*   registered: Jumlah pengguna terdaftar
*   cnt: Jumlah total sepeda yang disewakan

## Menentukan Pertanyaan Bisnis

1. Berapa banyak orang yang menyewa sepeda, per jam, hari, bulan, dan tahun?

2. Apakah cuaca buruk mengurangi jumlah peminjaman?

3. Apakah ada peningkatan yang konsisten pada musim tertentu?

4. Apakah ada peningkatan atau penurunan yang signifikan selama hari libur?

5. Apa perbandingan antara pengguna terdaftar dan pengguna kasual dalam penggunaan sepeda?

## Import Semua Packages/Library yang Digunakan

- NumPy: Pustaka untuk operasi matematika dan manipulasi array multidimensi, menyediakan fungsi efisien untuk perhitungan numerik.

- Pandas: Pustaka untuk manipulasi dan analisis data, dengan struktur data seperti DataFrame untuk pengolahan data berbasis tabel.

- Matplotlib: Pustaka untuk membuat visualisasi data, menyediakan berbagai fungsi untuk membuat grafik dan plot.

- Seaborn: Pustaka untuk visualisasi statistik yang dibangun di atas Matplotlib, memudahkan pembuatan grafik yang lebih menarik dan kompleks.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data

Kode dibawah ini membaca file CSV "hour.csv" ke dalam DataFrame hour_df menggunakan pandas, dan menampilkan lima baris pertama dari DataFrame tersebut dengan head(). Ini berguna untuk memeriksa struktur dan isi data sepeda.
"""

hour_df = pd.read_csv("/content/hour.csv")
hour_df.head()

"""Kode dibawah ini membaca file CSV "hour.csv" ke dalam DataFrame hour_df menggunakan pandas, dan menampilkan lima baris pertama dari DataFrame tersebut dengan head(). Ini berguna untuk memeriksa struktur dan isi data sepeda."""

day_df = pd.read_csv("/content/day.csv")
day_df.head()

"""### Assessing Data"""

hour_df.info()

"""Perintah hour_df.info() digunakan untuk memberikan ringkasan informasi tentang DataFrame hour_df. Ini mencakup:

- Jumlah total entri (baris) dalam DataFrame.
- Jumlah kolom dan nama-nama kolom.
- Tipe data untuk setiap kolom (misalnya, integer, float, object).
- Jumlah nilai non-null di setiap kolom, yang membantu mengidentifikasi apakah ada data yang hilang.
"""

day_df.info()

"""Perintah day_df.info() digunakan untuk memberikan ringkasan informasi tentang DataFrame day_df. Ini mencakup:

- Jumlah total entri (baris) dalam DataFrame.
- Jumlah kolom dan nama-nama kolom.
- Tipe data untuk setiap kolom (misalnya, integer, float, object).
- Jumlah nilai non-null di setiap kolom, yang membantu mengidentifikasi apakah ada data yang hilang.

**Insight:**

Terlihat pada informasi di atas bahwa `bike_hour_df` memiliki 17 kolom dengan jumlah barisnya 17379 yang bernilai non-null, serta tipe data `int64` sebanyak 12, `float64` sebanyak 4, dan `object` 1, sedangkan `bike_day_df` memiliki 16 kolom dengan jumlah barisnya 731 yang bernilai non-null, serta tipe data `int64` sebanyak 11, `float64` sebanyak 4, dan `object` 1.

Setelah mengetahui informasi tersebut, didapatkan beberapa kesalahan pada tipe data atribut `dteday` yang seharusnya bertipe data `datetime64`

### Cek missing Value dan duplikat

Perintah hour_df.isna().sum() digunakan untuk memeriksa jumlah nilai yang hilang (NaN) di setiap kolom dalam DataFrame hour_df.
"""

hour_df.isna().sum()

"""Perintah day_df.isna().sum() digunakan untuk memeriksa jumlah nilai yang hilang (NaN) di setiap kolom dalam DataFrame day_df."""

day_df.isna().sum()

"""Perintah berikut digunakan untuk menghitung dan mencetak jumlah entri duplikat dalam dua DataFrame: hour_df dan day_df.


"""

print("Jumlah duplikasi pada data rental per jam: ", hour_df.duplicated().sum())
print("Jumlah duplikasi pada data rental per hari: ", day_df.duplicated().sum())

"""**Insight:**
Berdaskan informasi diatas tidak ada missing value ataupun duplikat

### Cleaning Data

Data cleaning dilakukan untuk memperbaiki tipe data dari atribut `dteday` yang awalnya bertipe `object` menjadi `datetime64`. Proses ini dapat dilakukan menggunakan `function to_datetime()` yang disediakan oleh library `pandas`

Perintah berikut digunakan untuk mengonversi kolom dteday dalam DataFrame day_df dan hour_df menjadi format datetime menggunakan fungsi pd.to_datetime() dari pustaka Pandas.
"""

day_df.dteday = pd.to_datetime(day_df.dteday)
hour_df.dteday = pd.to_datetime(hour_df.dteday)

"""Perintah dibawah digunakan untuk mengecek ulang dan memastikan bahwa kolomdteday telah berubah"""

day_df.info()

"""Perintah dibawah digunakan untuk mengecek ulang dan memastikan bahwa kolomdteday telah berubah"""

hour_df.info()

"""**Insight :** setelah merubah tipe tipe data, data menjadi lebih siap untuk dilakukan proses analisis di tahapan selanjutnya

## Exploratory Data Analysis (EDA)

Pada data yang saya gunakan terdapat keterangan pada masing-masing atribut yang dapat dilihat pada tabel di bawah:

|  Kolom Data  | Keterangan |
|--------------|------------|
| `season`     | Telah diubah dari data berjenis *string* menjadi data numerik melalui proses *label encoding*. |
| `yr`         | Telah diubah menjadi data numerik dengan urutan tahun melalui proses *ordinal encoding*. |
| `holiday`    | Telah diubah dari data bertipe *string* menjadi nilai *boolean* melalui proses *binary encoding*. |
| `weekday`    | Telah diubah menjadi data numerik dengan urutan hari melalui proses *ordinal encoding*. |
| `workingday` | Telah diubah dari data bertipe *string* menjadi nilai *boolean* melalui proses *label encoding*. |
| `weathersit` | Telah diubah dari tingkatan jenis cuaca yang awalnya bertipe *string* menjadi data numerik melalui proses *ordinal encoding*. |
| temp, atemp, hum, dan windspeed     | Telah mengalami normalisasi dengan pembagian nilainya menjadi nilai maksimum yang telah ditentukan. |


contoh : jika sebelum encodig data berupa nilai string seperti season : season (springer, summer, fall, winter), maka setelah encoding menjadi season : season (1, 2, 3, 4), hal ini dibutuhkan jika kita ingin melatih model pada machine learning, tetapi pada kasus kita, hanya kita akan menganalisis data, tentu kita akan merubah ulang data ke bentuk awal supaya memudahkan kita untuk menganalisis dan membuat visualisasi, pada proses selanjutnya kita akan merubah nilainya

### Explore ...

Perintah hour_df.describe(include="all") dalam Pandas digunakan untuk menghasilkan ringkasan statistik dari DataFrame hour_df. Berikut adalah penjelasan lebih detail tentang fungsi ini:
"""

hour_df.describe(include="all")

"""Perintah day_df.describe(include="all") dalam Pandas digunakan untuk menghasilkan ringkasan statistik dari DataFrame day_df. Berikut adalah penjelasan lebih detail tentang fungsi ini:"""

day_df.describe(include="all")

"""kode dibawah digunakan untuk menyalin dataset supaya data yang asli tetap terjaga jika suatu saat kita memodifikasi data salinan untuk dilakukan analisis"""

copy_day_df = day_df.copy(deep=True)
copy_hour_df = hour_df.copy(deep=True)

"""**Insight:** kita menjadi tahu lebih dalam tentang data seperti nilai minimum, max dan sebagainya

## Visualization & Explanatory Analysis

Perintah berikan menggunakan metode .replace() dari Pandas untuk mengganti nilai-nilai dalam DataFrame copy_day_df dan copy_hour_df dengan nilai-nilai yang lebih deskriptif.
"""

copy_day_df.replace({
    'season': {1: 'Springer', 2: 'Summer', 3: 'Fall', 4: 'Winter'},
    'yr': {0: 2011, 1: 2012},
    'mnth' : {1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'Mei',6:'Jun',
             7:'Jul',8:'Agt',9:'Sept',10:'Okt',11:'Nov',12:'Des'},
    'holiday': {0: 'Not Holiday', 1: 'Holiday'},
    'workingday': {0: 'Holiday', 1: 'Working Day'},
    'weekday': {
        0: 'Sun', 1: 'Mon', 2: 'Tue', 3: 'Wed', 4: 'Thu', 5: 'Fri', 6: 'Sat'
    },
    'weathersit': {
        1: 'Clear', 2: 'Mist + Cloudy', 3: 'Light Snow', 4: 'Heavy Rain'
    }
}, inplace=True)

copy_hour_df.replace({
    'season': {1: 'Springer', 2: 'Summer', 3: 'Fall', 4: 'Winter'},
    'yr': {0: 2011, 1: 2012},
    'mnth' : {1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'Mei',6:'Jun',
              7:'Jul',8:'Agt',9:'Sept',10:'Okt',11:'Nov',12:'Des'},
    'holiday': {0: 'Holiday', 1: 'Not Holiday'},
    'workingday': {0: 'Holiday', 1: 'Working Day'},
    'weekday': {
        0: 'Sun', 1: 'Mon', 2: 'Tue', 3: 'Wed', 4: 'Thu', 5: 'Fri', 6: 'Sat'
    },
    'weathersit': {
        1: 'Clear', 2: 'Mist + Cloudy', 3: 'Light Snow', 4: 'Heavy Rain'
    }
}, inplace=True)

"""Kode bertujuan untuk memeriksa dan mencetak nilai unik dari kolom tertentu dalam dua DataFrame: copy_day_df dan copy_hour_df."""

columns_to_check = ['season', 'yr', 'mnth', 'holiday', 'workingday', 'weekday', 'weathersit']

print('copy_day_df Unique Value')
for column in columns_to_check:
    unique_values = copy_day_df[column].unique()
    print(f'{column}: {unique_values}')

print('\ncopy_hour_df Unique Value')
for column in columns_to_check:
    unique_values = copy_hour_df[column].unique()
    print(f'{column}: {unique_values}')

"""Membuat list untuk setiap fitur numerik ataupun kategori"""

hour_categorical_features = ['season', 'mnth', 'holiday', 'workingday', 'weekday', 'weathersit']
hour_numerical_features = ['temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt']

day_categorical_features = ['season', 'mnth', 'holiday', 'workingday', 'weekday', 'weathersit']
day_numerical_features = ['temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt']

"""Kode ini memvisualisasikan distribusi fitur kategorikal (musim) dalam dataset copy_hour_df dengan langkah-langkah berikut:

1. Pemilihan Fitur: Memilih fitur pertama dari daftar hour_categorical_features.

2. Penghitungan Jumlah dan Persentase: Menghitung jumlah dan persentase kemunculan setiap kategori menggunakan value_counts().

3. Pencetakan Distribusi: Menyusun hasil dalam DataFrame yang berisi "jumlah sampel" dan "persentase", lalu mencetaknya.

4. Penentuan Warna: Membuat daftar warna untuk batang grafik, di mana batang kategori dengan jumlah tertinggi berwarna ungu gelap (#6A1B9A), dan lainnya ungu muda (#E1BEE7).

5. Pembuatan Grafik Batang: Menggunakan matplotlib untuk membuat grafik batang, dengan judul dan label sumbu yang jelas.

6. Menampilkan Grafik: Menampilkan grafik batang untuk visualisasi distribusi kategori.
"""

feature = hour_categorical_features[0]
count = copy_hour_df[feature].value_counts()
percent = 100 * copy_hour_df[feature].value_counts(normalize=True)

print("==========DISTRIBUSI SEASON PADA DATASET copy_hour_df===========")
df = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(df)

# Create a color list for the bars
colors = ['#6A1B9A' if i == count.idxmax() else '#E1BEE7' for i in count.index]  # Light pale yellow and standard yellow

# Plotting
plt.figure(figsize=(8, 5))
count.plot(kind='bar', title=feature, color=colors)
plt.xlabel(feature)
plt.ylabel('Jumlah Sampel')
plt.xticks(rotation=0)  # Rotate x-axis labels for better readability
plt.show()

"""Kode ini memvisualisasikan distribusi fitur kategorikal (bulan) dalam dataset copy_hour_df dengan langkah-langkah berikut:

1. Pemilihan Fitur: Memilih fitur kedua dari daftar hour_categorical_features.

2. Penghitungan Jumlah dan Persentase: Menghitung jumlah dan persentase kemunculan setiap kategori menggunakan value_counts().

3. Pencetakan Distribusi: Menyusun hasil dalam DataFrame yang berisi "jumlah sampel" dan "persentase", lalu mencetaknya.

4. Penentuan Warna: Membuat daftar warna untuk batang grafik, di mana batang kategori dengan jumlah tertinggi berwarna ungu gelap (#6A1B9A), dan lainnya ungu muda (#E1BEE7).

5. Pembuatan Grafik Batang: Menggunakan matplotlib untuk membuat grafik batang, dengan judul dan label sumbu yang jelas.

6. Menampilkan Grafik: Menampilkan grafik batang untuk visualisasi distribusi kategori.
"""

feature = hour_categorical_features[1]
count = copy_hour_df[feature].value_counts()
percent = 100 * copy_hour_df[feature].value_counts(normalize=True)

print("==========DISTRIBUSI MOUNT PADA DATASET copy_hour_df===========")
df = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(df)

# Create a color list for the bars
colors = ['#6A1B9A' if i == count.idxmax() else '#E1BEE7' for i in count.index]  # Light pale yellow and standard yellow

# Plotting
plt.figure(figsize=(8, 5))
count.plot(kind='bar', title=feature, color=colors)
plt.xlabel(feature)
plt.ylabel('Jumlah Sampel')
plt.xticks(rotation=0)  # Rotate x-axis labels for better readability
plt.show()

"""Kode ini memvisualisasikan distribusi fitur kategorikal (libur) dalam dataset copy_hour_df dengan langkah-langkah berikut:

1. Pemilihan Fitur: Memilih fitur ketiga dari daftar hour_categorical_features.

2. Penghitungan Jumlah dan Persentase: Menghitung jumlah dan persentase kemunculan setiap kategori menggunakan value_counts().

3. Pencetakan Distribusi: Menyusun hasil dalam DataFrame yang berisi "jumlah sampel" dan "persentase", lalu mencetaknya.

4. Penentuan Warna: Membuat daftar warna untuk batang grafik, di mana batang kategori dengan jumlah tertinggi berwarna ungu gelap (#6A1B9A), dan lainnya ungu muda (#E1BEE7).

5. Pembuatan Grafik Batang: Menggunakan matplotlib untuk membuat grafik batang, dengan judul dan label sumbu yang jelas.

6. Menampilkan Grafik: Menampilkan grafik batang untuk visualisasi distribusi kategori.
"""

feature = hour_categorical_features[2]
count = copy_hour_df[feature].value_counts()
percent = 100 * copy_hour_df[feature].value_counts(normalize=True)

print("==========DISTRIBUSI HOLIDAY PADA DATASET copy_hour_df===========")
df = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(df)

# Create a color list for the bars
colors = ['#6A1B9A' if i == count.idxmax() else '#E1BEE7' for i in count.index]  # Light pale yellow and standard yellow

# Plotting
plt.figure(figsize=(8, 5))
count.plot(kind='bar', title=feature, color=colors)
plt.xlabel(feature)
plt.ylabel('Jumlah Sampel')
plt.xticks(rotation=0)  # Rotate x-axis labels for better readability
plt.show()

"""Kode ini memvisualisasikan distribusi fitur kategorikal (hari kerja) dalam dataset copy_hour_df dengan langkah-langkah berikut:

1. Pemilihan Fitur: Memilih fitur keempat dari daftar hour_categorical_features.

2. Penghitungan Jumlah dan Persentase: Menghitung jumlah dan persentase kemunculan setiap kategori menggunakan value_counts().

3. Pencetakan Distribusi: Menyusun hasil dalam DataFrame yang berisi "jumlah sampel" dan "persentase", lalu mencetaknya.

4. Penentuan Warna: Membuat daftar warna untuk batang grafik, di mana batang kategori dengan jumlah tertinggi berwarna ungu gelap (#6A1B9A), dan lainnya ungu muda (#E1BEE7).

5. Pembuatan Grafik Batang: Menggunakan matplotlib untuk membuat grafik batang, dengan judul dan label sumbu yang jelas.

6. Menampilkan Grafik: Menampilkan grafik batang untuk visualisasi distribusi kategori.
"""

feature = hour_categorical_features[3]
count = copy_hour_df[feature].value_counts()
percent = 100 * copy_hour_df[feature].value_counts(normalize=True)

print("==========DISTRIBUSI WORKING DAY PADA DATASET copy_hour_df===========")
df = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(df)

# Create a color list for the bars
colors = ['#6A1B9A' if i == count.idxmax() else '#E1BEE7' for i in count.index]  # Light pale yellow and standard yellow

# Plotting
plt.figure(figsize=(8, 5))
count.plot(kind='bar', title=feature, color=colors)
plt.xlabel(feature)
plt.ylabel('Jumlah Sampel')
plt.xticks(rotation=0)  # Rotate x-axis labels for better readability
plt.show()

"""Kode ini memvisualisasikan distribusi fitur kategorikal (hari dalam seminggu) dalam dataset copy_hour_df dengan langkah-langkah berikut:

1. Pemilihan Fitur: Memilih fitur kelima dari daftar hour_categorical_features.

2. Penghitungan Jumlah dan Persentase: Menghitung jumlah dan persentase kemunculan setiap kategori menggunakan value_counts().

3. Pencetakan Distribusi: Menyusun hasil dalam DataFrame yang berisi "jumlah sampel" dan "persentase", lalu mencetaknya.

4. Penentuan Warna: Membuat daftar warna untuk batang grafik, di mana batang kategori dengan jumlah tertinggi berwarna ungu gelap (#6A1B9A), dan lainnya ungu muda (#E1BEE7).

5. Pembuatan Grafik Batang: Menggunakan matplotlib untuk membuat grafik batang, dengan judul dan label sumbu yang jelas.

6. Menampilkan Grafik: Menampilkan grafik batang untuk visualisasi distribusi kategori.
"""

feature = hour_categorical_features[4]
count = copy_hour_df[feature].value_counts()
percent = 100 * copy_hour_df[feature].value_counts(normalize=True)

print("==========DISTRIBUSI WEEK DAY PADA DATASET copy_hour_df===========")
df = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(df)

# Create a color list for the bars
colors = ['#6A1B9A' if i == count.idxmax() else '#E1BEE7' for i in count.index]  # Light pale yellow and standard yellow

# Plotting
plt.figure(figsize=(8, 5))
count.plot(kind='bar', title=feature, color=colors)
plt.xlabel(feature)
plt.ylabel('Jumlah Sampel')
plt.xticks(rotation=0)  # Rotate x-axis labels for better readability
plt.show()

"""Kode ini memvisualisasikan distribusi fitur kategorikal (kondisi cuaca) dalam dataset copy_hour_df dengan langkah-langkah berikut:

1. Pemilihan Fitur: Memilih fitur keenam dari daftar hour_categorical_features.

2. Penghitungan Jumlah dan Persentase: Menghitung jumlah dan persentase kemunculan setiap kategori menggunakan value_counts().

3. Pencetakan Distribusi: Menyusun hasil dalam DataFrame yang berisi "jumlah sampel" dan "persentase", lalu mencetaknya.

4. Penentuan Warna: Membuat daftar warna untuk batang grafik, di mana batang kategori dengan jumlah tertinggi berwarna ungu gelap (#6A1B9A), dan lainnya ungu muda (#E1BEE7).

5. Pembuatan Grafik Batang: Menggunakan matplotlib untuk membuat grafik batang, dengan judul dan label sumbu yang jelas.

6. Menampilkan Grafik: Menampilkan grafik batang untuk visualisasi distribusi kategori.
"""

feature = hour_categorical_features[5]
count = copy_hour_df[feature].value_counts()
percent = 100 * copy_hour_df[feature].value_counts(normalize=True)

print("==========DISTRIBUSI WEATHERSIT PADA DATASET copy_hour_df===========")
df = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(df)

# Create a color list for the bars
colors = ['#6A1B9A' if i == count.idxmax() else '#E1BEE7' for i in count.index]  # Light pale yellow and standard yellow

# Plotting
plt.figure(figsize=(8, 5))
count.plot(kind='bar', title=feature, color=colors)
plt.xlabel(feature)
plt.ylabel('Jumlah Sampel')
plt.xticks(rotation=0)  # Rotate x-axis labels for better readability
plt.show()

"""Kode ini memvisualisasikan distribusi fitur numerik dalam DataFrame copy_day_df menggunakan histogram. Berikut adalah langkah-langkah yang dilakukan:

1. Pengaturan Ukuran Gambar: Mengatur ukuran gambar untuk visualisasi dengan plt.figure(figsize=(20, 15)).

2. Loop Melalui Kolom Numerik: Menggunakan enumerate untuk mengiterasi setiap kolom numerik dalam DataFrame. Kolom numerik dipilih dengan select_dtypes(include=['float64', 'int64']).

3. Pembuatan Subplot: Untuk setiap kolom, subplot dibuat berdasarkan jumlah kolom numerik, dengan dua kolom per baris.

4. Penghitungan Nilai Paling Sering: Menggunakan mode() untuk mendapatkan nilai yang paling sering muncul dalam kolom saat ini.

5. Pembuatan Histogram: Menggunakan plt.hist() untuk membuat histogram dari kolom, dengan 50 bin, warna tepi hitam, dan transparansi 0.7.

6. Penyorotan Nilai Paling Sering: Mengubah warna batang histogram yang sesuai dengan nilai paling sering menjadi oranye, sementara batang lainnya berwarna biru muda.

7. Pengaturan Judul dan Label: Menambahkan judul, label sumbu x, dan label sumbu y untuk setiap subplot.

8. Penyesuaian Tata Letak: Menggunakan plt.tight_layout() untuk menyesuaikan tata letak agar tidak ada yang tumpang tindih.

9. Menampilkan Grafik: Menampilkan semua histogram yang telah dibuat.
"""

plt.figure(figsize=(20, 15))

# Ulangi setiap kolom numerik di DataFrame
for i, column in enumerate(copy_day_df.select_dtypes(include=['float64', 'int64']).columns):
    plt.subplot(len(copy_day_df.select_dtypes(include=['float64', 'int64']).columns) // 2 + 1, 2, i + 1)

    # Dapatkan nilai paling sering
    most_frequent_value = copy_day_df[column].mode()[0]

    # Create histogram
    counts, bins, patches = plt.hist(copy_day_df[column], bins=50, edgecolor='black', alpha=0.7)

    # Sorot bilah yang sesuai dengan nilai yang paling sering muncul
    for patch in patches:
        if patch.get_x() <= most_frequent_value < patch.get_x() + patch.get_width():
            patch.set_facecolor('orange')  # Ubah warna untuk nilai yang paling sering
        else:
            patch.set_facecolor('lightblue')  # Warna default untuk batang lainnya

    plt.title(column)
    plt.xlabel(column)
    plt.ylabel('Frequency')

plt.tight_layout()  # menyesuaikan tata letak untuk mencegah tumpang tindih
plt.show()

"""## **Pertanyaan 1 : Berapa banyak orang yang menyewa sepeda, per jam, hari, bulan, dan tahun?**

kode dibawah yang memvisualisasikan total sewa sepeda per jam dalam DataFrame copy_hour_df menggunakan grafik batang:

1. Pengelompokan Data: Data dikelompokkan berdasarkan jam (hr), dan total sewa sepeda (cnt) dihitung untuk setiap jam. Hasilnya disimpan dalam DataFrame baru yang menunjukkan total sewa sepeda per jam.

2. Identifikasi Jam dengan Sewa Maksimum: Dari DataFrame yang telah dibuat, jam di mana total sewa sepeda tertinggi diidentifikasi menggunakan fungsi idxmax().

3. Pembuatan Daftar Warna: Sebuah daftar warna dibuat untuk batang grafik, di mana batang yang mewakili jam dengan sewa maksimum diberi warna oranye, sementara batang lainnya diberi warna kuning muda.

4. Pembuatan Grafik Batang: Grafik batang dibuat menggunakan seaborn, dengan sumbu x menunjukkan jam dan sumbu y menunjukkan total sewa sepeda.

5. Pengaturan Judul dan Label: Judul grafik dan label untuk sumbu x dan sumbu y ditambahkan untuk memberikan konteks pada grafik.

6. Rotasi Label Sumbu X: Label pada sumbu x diputar untuk meningkatkan keterbacaan, terutama jika ada banyak label jam.

7. Menampilkan Grafik: Grafik batang yang telah dibuat ditampilkan kepada pengguna.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Mengelompokkan data
total_sewa_per_jam = copy_hour_df.groupby('hr')['cnt'].sum().reset_index().rename(columns={'cnt': 'Total Sewa Sepeda'})

# Identifikasi jam dengan sewa maksimum
max_hour = total_sewa_per_jam.loc[total_sewa_per_jam['Total Sewa Sepeda'].idxmax(), 'hr']

# Buat daftar warna di mana permintaan rata-rata maksimal disorot
colors = ['orange' if hour == max_hour else '#FFCC80' for hour in total_sewa_per_jam['hr']]  # Light orange

# Plotting
plt.figure(figsize=(8, 4))
sns.barplot(x='hr', y='Total Sewa Sepeda', data=total_sewa_per_jam, palette=colors)
plt.title('Total Sewa Sepeda per Jam')
plt.xlabel('Jam')
plt.ylabel('Total Sewa Sepeda')
plt.xticks(rotation=45)  # Rotate x labels if needed
plt.show()

"""kode dibawah memvisualisasikan total sewa sepeda per hari dalam DataFrame copy_day_df menggunakan grafik batang:

1. Pengelompokan Data: Data dikelompokkan berdasarkan hari dalam seminggu (weekday), dan total sewa sepeda (cnt) dihitung untuk setiap hari. Hasilnya disimpan dalam DataFrame baru yang menunjukkan total sewa sepeda per hari.

2. Identifikasi Hari dengan Sewa Maksimum: Dari DataFrame yang telah dibuat, hari di mana total sewa sepeda tertinggi diidentifikasi menggunakan fungsi idxmax().

3. Pembuatan Daftar Warna: Sebuah daftar warna dibuat untuk batang grafik, di mana batang yang mewakili hari dengan sewa maksimum diberi warna hijau (#4CAF50), sementara batang lainnya diberi warna hijau muda (#A5D6A7).

4. Pembuatan Grafik Batang: Grafik batang dibuat menggunakan seaborn, dengan sumbu x menunjukkan hari dan sumbu y menunjukkan total sewa sepeda.

5. Pengaturan Judul dan Label: Judul grafik dan label untuk sumbu x dan sumbu y ditambahkan untuk memberikan konteks pada grafik.

6. Menampilkan Grafik: Grafik batang yang telah dibuat ditampilkan kepada pengguna.
"""

total_sewa_per_hari = copy_day_df.groupby('weekday')['cnt'].sum().reset_index().rename(columns={'cnt': 'Total Sewa Sepeda'})

# Identifikasi bulan dengan sewa maksimum
max_day = total_sewa_per_hari.loc[total_sewa_per_hari['Total Sewa Sepeda'].idxmax(), 'weekday']

# Buat daftar warna di mana permintaan rata-rata maksimal disorot
colors = ['#4CAF50' if day == max_day else '#A5D6A7' for day in total_sewa_per_hari['weekday']]  # Green and light green

# Plotting
plt.figure(figsize=(8, 4))
sns.barplot(x='weekday', y='Total Sewa Sepeda', data=total_sewa_per_hari, palette=colors)
plt.title('Total Sewa Sepeda per Hari')
plt.xlabel('Hari')
plt.ylabel('Total Sewa Sepeda')
plt.show()

"""kode dibawah memvisualisasikan total sewa sepeda per bulan dalam DataFrame copy_day_df menggunakan grafik batang:

1. Pengelompokan Data: Data dikelompokkan berdasarkan bulan (mnth), dan total sewa sepeda (cnt) dihitung untuk setiap bulan. Hasilnya disimpan dalam DataFrame baru yang menunjukkan total sewa sepeda per bulan.

2. Identifikasi Bulan dengan Sewa Maksimum: Dari DataFrame yang telah dibuat, bulan di mana total sewa sepeda tertinggi diidentifikasi menggunakan fungsi idxmax().

3. Pembuatan Daftar Warna: Sebuah daftar warna dibuat untuk batang grafik, di mana batang yang mewakili bulan dengan sewa maksimum diberi warna biru tua (#2196F3), sementara batang lainnya diberi warna biru muda (#BBDEFB).

4. Pembuatan Grafik Batang: Grafik batang dibuat menggunakan seaborn, dengan sumbu x menunjukkan bulan dan sumbu y menunjukkan total sewa sepeda.

5. Pengaturan Judul dan Label: Judul grafik dan label untuk sumbu x dan sumbu y ditambahkan untuk memberikan konteks pada grafik.

6. Rotasi Label Sumbu X: Label pada sumbu x diputar untuk meningkatkan keterbacaan, terutama jika ada banyak label bulan.

7. Menampilkan Grafik: Grafik batang yang telah dibuat ditampilkan kepada pengguna.
"""

total_sewa_per_bulan = copy_day_df.groupby('mnth')['cnt'].sum().reset_index().rename(columns={'cnt': 'Total Sewa Sepeda'})

# Identifikasi bulan dengan sewa maksimum
max_month = total_sewa_per_bulan.loc[total_sewa_per_bulan['Total Sewa Sepeda'].idxmax(), 'mnth']

# Buat daftar warna di mana permintaan rata-rata maksimal disorot
colors = ['#2196F3' if month == max_month else '#BBDEFB' for month in total_sewa_per_bulan['mnth']]  # Dark blue and light blue

# Plotting
plt.figure(figsize=(8, 4))
sns.barplot(x='mnth', y='Total Sewa Sepeda', data=total_sewa_per_bulan, palette=colors)
plt.title('Total Sewa Sepeda per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Total Sewa Sepeda')
plt.xticks(rotation=45)  # Rotate x labels if needed
plt.show()

"""kode dibawah memvisualisasikan total sewa sepeda per tahun dalam DataFrame copy_day_df menggunakan grafik batang:

1. Pengelompokan Data: Data dikelompokkan berdasarkan tahun (yr), dan total sewa sepeda (cnt) dihitung untuk setiap tahun. Hasilnya disimpan dalam DataFrame baru yang menunjukkan total sewa sepeda per tahun.

2. Identifikasi Tahun dengan Sewa Maksimum: Dari DataFrame yang telah dibuat, tahun di mana total sewa sepeda tertinggi diidentifikasi menggunakan fungsi idxmax().

3. Pembuatan Daftar Warna: Sebuah daftar warna dibuat untuk batang grafik, di mana batang yang mewakili tahun dengan sewa maksimum diberi warna merah tua (#F44336), sementara batang lainnya diberi warna merah muda (#FFCDD2).

4. Pembuatan Grafik Batang: Grafik batang dibuat menggunakan seaborn, dengan sumbu x menunjukkan tahun dan sumbu y menunjukkan total sewa sepeda.

5. Pengaturan Judul dan Label: Judul grafik dan label untuk sumbu x dan sumbu y ditambahkan untuk memberikan konteks pada grafik.

6. Format Sumbu Y: Sumbu y diformat untuk menampilkan angka dengan pemisah ribuan, sehingga lebih mudah dibaca.

7. Menampilkan Grafik: Grafik batang yang telah dibuat ditampilkan kepada pengguna.
"""

total_sewa_per_tahun = copy_day_df.groupby('yr')['cnt'].sum().reset_index().rename(columns={'cnt': 'Total Sewa Sepeda'})

# Identifikasi tahun dengan sewa maksimum
max_year = total_sewa_per_tahun.loc[total_sewa_per_tahun['Total Sewa Sepeda'].idxmax(), 'yr']

# Buat daftar warna di mana permintaan rata-rata maksimal disorot
colors = ['#F44336' if year == max_year else '#FFCDD2' for year in total_sewa_per_tahun['yr']]  # Dark red and light red

# Plotting
plt.figure(figsize=(8, 4))
sns.barplot(x='yr', y='Total Sewa Sepeda', data=total_sewa_per_tahun, palette=colors)
plt.title('Total Sewa Sepeda per Tahun')
plt.xlabel('Tahun')
plt.ylabel('Total Sewa Sepeda')
plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, pos: '{:,}'.format(int(x))))  # Format y-axis with commas

plt.show()

"""## **Pertanyaan 2 : Apakah cuaca buruk mengurangi jumlah peminjaman?**

kode dibawah memvisualisasikan pengaruh kondisi cuaca terhadap permintaan sepeda per hari dalam DataFrame copy_day_df menggunakan grafik batang:

1. Pengelompokan Data: Data dikelompokkan berdasarkan kondisi cuaca (weathersit), dan rata-rata permintaan sepeda (cnt) dihitung untuk setiap kondisi cuaca. Hasilnya disimpan dalam DataFrame baru yang menunjukkan rata-rata permintaan sepeda berdasarkan kondisi cuaca, diurutkan dari yang tertinggi ke terendah.

2. Pembuatan Daftar Warna: Sebuah daftar warna dibuat untuk batang grafik, di mana batang yang mewakili kondisi cuaca dengan rata-rata permintaan tertinggi diberi warna ungu tua (#6A1B9A), sementara batang lainnya diberi warna ungu muda (#E1BEE7).

3. Pembuatan Grafik Batang: Grafik batang dibuat menggunakan seaborn, dengan sumbu x menunjukkan kondisi cuaca dan sumbu y menunjukkan rata-rata permintaan sepeda.

4. Pengaturan Judul dan Label: Judul grafik dan label untuk sumbu x dan sumbu y ditambahkan untuk memberikan konteks pada grafik.

5. Penyesuaian Label Sumbu X: Label pada sumbu x disesuaikan untuk menggambarkan kondisi cuaca dengan lebih jelas, menggunakan label yang lebih deskriptif seperti 'Clear', 'Mist + Cloudy', 'Light Snow', dan 'Heavy Rain'.

6. Menampilkan Grafik: Grafik batang yang telah dibuat ditampilkan kepada pengguna.
"""

cuaca_vs_permintaan_day = copy_day_df.groupby('weathersit')['cnt'].mean().sort_values(ascending=False).reset_index()

# Buat daftar warna di mana permintaan rata-rata maksimal disorot
colors = ['#6A1B9A' if i == 0 else '#E1BEE7' for i in range(len(cuaca_vs_permintaan_day))]  # Dark purple and light purple

# Plotting
plt.figure(figsize=(8, 5))
sns.barplot(x='weathersit', y='cnt', data=cuaca_vs_permintaan_day, palette=colors)
plt.title('Pengaruh Cuaca Buruk Terhadap Permintaan Sepeda per Hari')
plt.xlabel('Kondisi Cuaca')
plt.ylabel('Rata-rata Permintaan Sepeda')
plt.xticks([0, 1, 2, 3], ['Clear', 'Mist + Cloudy', 'Light Snow', 'Heavy Rain'])
plt.show()

"""## **Pertanyaan 3 : Apakah ada peningkatan yang konsisten pada musim tertentu?**

kode dibawah memvisualisasikan tren musiman dalam penggunaan sepeda berdasarkan musim dalam DataFrame copy_day_df menggunakan grafik batang:

1. Pengelompokan Data: Data dikelompokkan berdasarkan musim (season), dan rata-rata permintaan sepeda (cnt) dihitung untuk setiap musim. Hasilnya disimpan dalam DataFrame baru yang menunjukkan rata-rata permintaan sepeda berdasarkan musim.

2. Penggantian Nama Kolom: Kolom cnt diubah namanya menjadi sum untuk mencerminkan bahwa nilai tersebut adalah rata-rata permintaan sepeda per musim.

3. Pembuatan Daftar Warna: Sebuah daftar warna dibuat untuk batang grafik, di mana batang yang mewakili musim dengan rata-rata permintaan tertinggi diberi warna pink tua (#D81B60), sementara batang lainnya diberi warna pink muda (#F8BBD0).

4. Pembuatan Grafik Batang: Grafik batang dibuat menggunakan seaborn, dengan sumbu x menunjukkan musim dan sumbu y menunjukkan rata-rata permintaan sepeda.

5. Pengaturan Judul dan Label: Judul grafik dan label untuk sumbu x dan sumbu y ditambahkan untuk memberikan konteks pada grafik.
"""

rentals_per_season = copy_day_df.groupby('season')['cnt'].mean().reset_index()
rentals_per_season.rename(columns={'cnt': 'sum'}, inplace=True)

# Buat daftar warna di mana permintaan rata-rata maksimal disorot
colors = ['#D81B60' if i == rentals_per_season['sum'].idxmax() else '#F8BBD0' for i in range(len(rentals_per_season))]  # Dark pink and light pink

# Plotting
plt.figure(figsize=(8, 5))
sns.barplot(x='season', y='sum', data=rentals_per_season, palette=colors)
plt.title('Tren Musiman dalam Penggunaan Sepeda berdasarkan Musim')
plt.xlabel('Musim')
plt.ylabel('Rata-rata Permintaan Sepeda')
plt.show()

"""## **Pertanyaan 4 : Apakah ada peningkatan atau penurunan yang signifikan selama hari libur?**

kode dibawah memvisualisasikan pengaruh hari libur terhadap penggunaan sepeda dalam DataFrame copy_day_df menggunakan grafik batang:

1. Pengelompokan Data: Data dikelompokkan berdasarkan status hari libur (holiday), dan rata-rata permintaan sepeda (cnt) dihitung untuk setiap kategori hari libur. Hasilnya disimpan dalam DataFrame baru yang menunjukkan rata-rata permintaan sepeda berdasarkan status hari libur.

2. Pembuatan Daftar Warna: Sebuah daftar warna dibuat untuk batang grafik, di mana batang yang mewakili status hari libur dengan rata-rata permintaan tertinggi diberi warna kuning cerah (#FFEB3B), sementara batang lainnya diberi warna kuning muda (#FFF9C4).

3. Pembuatan Grafik Batang: Grafik batang dibuat menggunakan seaborn, dengan sumbu x menunjukkan status hari libur dan sumbu y menunjukkan rata-rata permintaan sepeda.

4. Pengaturan Judul dan Label: Judul grafik dan label untuk sumbu x dan sumbu y ditambahkan untuk memberikan konteks pada grafik.

5. Menampilkan Grafik: Grafik batang yang telah dibuat ditampilkan kepada pengguna.
"""

average_rentals_on_holiday = copy_day_df.groupby('holiday')['cnt'].mean().reset_index()

# Buat daftar warna di mana permintaan rata-rata maksimal disorot
colors = ['#FFEB3B' if i == average_rentals_on_holiday['cnt'].idxmax() else '#FFF9C4' for i in range(len(average_rentals_on_holiday))]  # Light pale yellow and standard yellow

# Plotting
plt.figure(figsize=(8, 5))
sns.barplot(x='holiday', y='cnt', data=average_rentals_on_holiday, palette=colors)
plt.title('Pengaruh Hari Libur Terhadap Penggunaan Sepeda')
plt.xlabel('Hari Libur')
plt.ylabel('Rata-rata Permintaan Sepeda')
plt.show()

"""## **Pertanyaan 5 : Bagaimana perbandingan antara pengguna terdaftar dan pengguna kasual dalam penggunaan sepeda?**

kode dibawah memvisualisasikan perbandingan penggunaan sepeda oleh pengguna terdaftar dan kasual dalam DataFrame copy_hour_df menggunakan grafik garis:

1. Pengelompokan Data: Data dikelompokkan berdasarkan jam (hr) dan tahun (yr), dan rata-rata jumlah pengguna terdaftar (registered) dan kasual (casual) dihitung untuk setiap kombinasi jam dan tahun. Hasilnya disimpan dalam DataFrame baru yang menunjukkan rata-rata permintaan sepeda berdasarkan jam untuk kedua tipe pengguna.

2. Pembuatan Grafik Garis: Grafik garis dibuat menggunakan seaborn:

3. Garis pertama menggambarkan rata-rata permintaan sepeda oleh pengguna terdaftar dengan sumbu x menunjukkan jam dan sumbu y menunjukkan rata-rata permintaan.
Garis kedua menggambarkan rata-rata permintaan sepeda oleh pengguna kasual dengan sumbu x yang sama.
Pengaturan Judul dan Label: Judul grafik dan label untuk sumbu x dan sumbu y ditambahkan untuk memberikan konteks pada grafik.

4. Penambahan Legenda: Legenda ditambahkan untuk membedakan antara pengguna terdaftar dan kasual, dengan judul "Tipe Pengguna".

5. Menampilkan Grafik: Grafik garis yang telah dibuat ditampilkan kepada pengguna.
"""

# Menghitung rata-rata pengguna terdaftar dan kasual
perbandingan_pengguna = copy_hour_df.groupby(['hr', 'yr'])[['registered', 'casual']].mean().reset_index()

# Menghitung total pengguna terdaftar dan kasual
total_pengguna = perbandingan_pengguna[['registered', 'casual']].sum()

# Membuat pie chart
plt.figure(figsize=(8, 8))
colors = ['#66c2a5', '#fc8d62']  # Warna yang lebih menarik
explode = (0.1, 0)  # Memisahkan bagian 'Terdaftar'

plt.pie(total_pengguna,
        labels=['Terdaftar', 'Kasual'],
        autopct='%1.1f%%',
        startangle=90,
        colors=colors,
        explode=explode,
        shadow=True)

plt.title('Proporsi Pengguna Terdaftar dan Kasual', fontsize=16)
plt.axis('equal')  # Equal aspect ratio ensures that pie chart is circular.
plt.show()

"""## Conclusion

## Pengaruh Cuaca terhadap Permintaan Sepeda
> Dalam analisis data sebelumnya, saya menemukan bahwa rata-rata permintaan sepeda mencapai puncaknya pada hari-hari dengan cuaca cerah. Ini menunjukkan bahwa kondisi cuaca yang baik cenderung meningkatkan minat masyarakat untuk menggunakan sepeda. Cuaca yang mendukung memberikan pengalaman berkendara yang lebih nyaman dan aman, yang mungkin menjadi faktor utama mengapa permintaan sepeda lebih tinggi pada hari-hari tersebut.

## Variasi Musiman dalam Penggunaan Sepeda
> Berdasarkan data yang tersedia mengenai musim, dapat disimpulkan bahwa permintaan sepeda paling tinggi terjadi selama musim gugur (Fall). Hal ini mungkin disebabkan oleh cuaca yang lebih nyaman dan meningkatnya aktivitas luar ruangan yang populer pada musim tersebut.

## Pengaruh Hari Libur terhadap Penggunaan Sepeda
> Dari hasil eksplorasi data, saya dapat menyimpulkan bahwa penggunaan sepeda cenderung lebih tinggi pada hari-hari yang bukan hari libur. Ini menunjukkan bahwa orang lebih suka menggunakan sepeda sebagai sarana transportasi pada hari kerja atau hari-hari biasa dibandingkan pada hari libur. Variasi ini dalam penggunaan sepeda dapat mempengaruhi kebijakan penyedia layanan sepeda, seperti jumlah sepeda yang tersedia atau penawaran promosi selama hari kerja untuk meningkatkan penggunaan sepeda.

## Perbandingan Penggunaan Sepeda oleh Pengguna Terdaftar dan Kasual
> Pengguna terdaftar cenderung lebih aktif dan konsisten dalam menyewa sepeda. Perbedaan ini mungkin menunjukkan bahwa pengguna terdaftar memiliki pola penggunaan yang lebih teratur dan terjadwal, sementara pengguna kasual lebih mungkin menggunakan sepeda secara sporadis atau sebagai wisatawan pada waktu tertentu.

Kode dibawah berfungsi untuk menyimpan DataFrame copy_day_df ke dalam file CSV dengan nama data_day.csv. Berikut adalah penjelasan langkah demi langkah tentang apa yang dilakukan oleh kode ini:

1. Penentuan Nama File: Variabel data_clean diatur untuk menyimpan nama file yang akan digunakan, yaitu 'data_day.csv'.

2. Menyimpan DataFrame ke CSV: Metode to_csv() dari DataFrame copy_day_df dipanggil untuk menyimpan data ke dalam file CSV. Parameter index=False digunakan untuk memastikan bahwa indeks DataFrame tidak disertakan dalam file CSV yang dihasilkan. Ini berarti hanya kolom data yang akan disimpan, tanpa kolom indeks yang biasanya ditambahkan oleh pandas.

3. Output: Setelah menjalankan kode ini, file data_day.csv akan dibuat di direktori kerja saat ini, berisi data dari DataFrame copy_day_df.
"""

data_clean = 'data_hour.csv'
copy_hour_df.to_csv(data_clean, index=False)

"""Kode dibawah digunakan untuk mengunduh file yang telah disimpan ke dalam Google Colab. Berikut adalah penjelasan langkah demi langkah tentang apa yang dilakukan oleh kode ini:

1. Impor Modul: Baris pertama mengimpor modul files dari pustaka google.colab. Modul ini menyediakan fungsi untuk mengelola file dalam lingkungan Google Colab.

2. Mengunduh File: Fungsi files.download(data_clean) dipanggil untuk mengunduh file yang telah disimpan sebelumnya. Dalam hal ini, data_clean adalah nama file yang berisi 'data_day.csv'. Ketika fungsi ini dipanggil, browser Anda akan mulai mengunduh file tersebut.

3. Output: Setelah menjalankan kode ini, Anda akan melihat prompt di browser untuk mengunduh file data_day.csv ke komputer Anda.
"""

from google.colab import files
files.download(data_clean)

"""Perintah pip freeze > requirements.txt digunakan untuk membuat file requirements.txt yang berisi daftar semua paket Python yang terinstal dalam lingkungan saat ini beserta versi mereka."""

pip freeze requirements.txt

